package cn.cl.bos.realm;

import cn.cl.bos.domain.system.Permission;
import cn.cl.bos.domain.system.Role;
import cn.cl.bos.domain.system.User;
import cn.cl.bos.service.system.PermissionService;
import cn.cl.bos.service.system.RoleService;
import cn.cl.bos.service.system.UserService;
import org.apache.shiro.SecurityUtils;
import org.apache.shiro.authc.*;
import org.apache.shiro.authz.AuthorizationInfo;
import org.apache.shiro.authz.SimpleAuthorizationInfo;
import org.apache.shiro.realm.AuthorizingRealm;
import org.apache.shiro.subject.PrincipalCollection;
import org.apache.shiro.subject.Subject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

//自定义realm方法实现 安全数据连接
@Service("bosRealm")
public class BosRealm extends AuthorizingRealm {

    @Autowired
    private UserService userService;
    @Autowired
    private RoleService roleService;
    @Autowired
    private PermissionService permissionService;
<<<<<<< .merge_file_SzGeiC

//    页面权限、方法权限控制
=======
>>>>>>> .merge_file_nVFHgv
    @Override
    protected AuthorizationInfo doGetAuthorizationInfo(PrincipalCollection pc) {
        SimpleAuthorizationInfo authenticationInfo = new SimpleAuthorizationInfo();
        //根据当前登录的用户查询用户的角色和权限
        Subject subject = SecurityUtils.getSubject();
        User user = (User) subject.getPrincipal();
        //调用业务层查询角色
        List<Role> roles =roleService.findByUser(user);
        for (Role role : roles) {
            authenticationInfo.addRole(role.getKeyword());
        }

        //调用业务层查询权限
        List<Permission> permissions =permissionService.findByUser(user);
        for (Permission permission : permissions) {
            authenticationInfo.addStringPermission(permission.getKeyword());
        }
        return authenticationInfo;
    }
<<<<<<< .merge_file_SzGeiC
//登录权限控制
=======

>>>>>>> .merge_file_nVFHgv
    @Override
    protected AuthenticationInfo doGetAuthenticationInfo(AuthenticationToken token) throws AuthenticationException {
        //转换token
        UsernamePasswordToken usernamePasswordToken = (UsernamePasswordToken) token;
        User user =userService.findByUsername(usernamePasswordToken.getUsername());
        if (user==null){
            //用户名不存在
            return null;
        }else {
            //用户存在,返回密码,安全管理器进行比对
            //如果一致就登录否则就异常
            return new SimpleAuthenticationInfo(user, user.getPassword(), getName());
        }

    }
}
